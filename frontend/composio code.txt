
import { OpenAIToolSet } from 'composio-core';
const toolset = new OpenAIToolSet({ apiKey: 'ixbtlkivtqk45d0qf2epa5' });

const integration = await toolset.integrations.get({integrationId: '73876b33-344e-44fc-81f4-628298823368'});
const expectedInputFields = await toolset.integrations.getRequiredParams(integration.id);
// Collect auth params from your users
console.log(expectedInputFields);
const connectedAccount = await toolset.connectedAccounts.initiate({
    integrationId: integration.id,
    entityId: 'default',
});

// connected account properties:
// connectionStatus (string), connectedAccountId (string), redirectUrl (string | null)
console.log(connectedAccount.redirectUrl);
=================
gmailExecute tools
Step 3/3 :
Configure Integration
Connect an account
Execute tools

Action

GMAIL FETCH EMAILS
Schema
Select Account

b8a29270-8c2e-4ab6-8981-0f664e94ff0d
ü™Ñ Natural Language Execution
Generate inputs using function calling
Generate
üìù Action Parameters
Specify the required inputs for this action
Run
User Id : string
key: user_id

The user's email address or 'me' for the authenticated user.
me
Max Results : integer
key: max_results

Maximum number of messages to return.
10
Page Token : string
key: page_token

Page token to retrieve a specific page of results in the lis...Read more
Query : string
key: query

Only return messages matching the specified query.
Label Ids : array
key: label_ids

Filter messages by their label IDs. Labels identify the stat...Read more
Include Spam Trash : boolean
key: include_spam_trash

Include messages from SPAM and TRASH in the results.

Use LangChain with Composio

Copy
from langchain.agents import create_openai_functions_agent, AgentExecutor
from langchain import hub
from langchain_openai import ChatOpenAI
from composio_langchain import ComposioToolSet, Action, App
llm = ChatOpenAI()
prompt = hub.pull("hwchase17/openai-functions-agent")

composio_toolset = ComposioToolSet(api_key="ixbtlkivtqk45d0qf2epa5")
tools = composio_toolset.get_tools(actions=['GMAIL_FETCH_EMAILS'])

agent = create_openai_functions_agent(llm, tools, prompt)
agent_executor = AgentExecutor(agent=agent, tools=tools, verbose=True)
task = "your task description here"
result = agent_executor.invoke({"input": task})
print(result)

======
gmailExecute tools
Step 3/3 :
Configure Integration
Connect an account
Execute tools

Action

GMAIL GET PROFILE

from langchain.agents import create_openai_functions_agent, AgentExecutor
from langchain import hub
from langchain_openai import ChatOpenAI
from composio_langchain import ComposioToolSet, Action, App
llm = ChatOpenAI()
prompt = hub.pull("hwchase17/openai-functions-agent")

composio_toolset = ComposioToolSet(api_key="ixbtlkivtqk45d0qf2epa5")
tools = composio_toolset.get_tools(actions=['GMAIL_GET_PROFILE'])

agent = create_openai_functions_agent(llm, tools, prompt)
agent_executor = AgentExecutor(agent=agent, tools=tools, verbose=True)
task = "your task description here"
result = agent_executor.invoke({"input": task})
print(result)

==
gmailExecute tools
Step 3/3 :
Configure Integration
Connect an account
Execute tools

Action

GMAIL FETCH EMAILS
Schema
ü™Ñ Natural Language Execution
Generate inputs using function calling
Generate
üìù Action Parameters
Specify the required inputs for this action
Run
User Id : string
key: user_id

The user's email address or 'me' for the authenticated user.
me
Max Results : integer
key: max_results

Maximum number of messages to return.
10
Page Token : string
key: page_token

Page token to retrieve a specific page of results in the lis...Read more
Query : string
key: query

Only return messages matching the specified query.
Label Ids : array
key: label_ids

Filter messages by their label IDs. Labels identify the stat...Read more
Include Spam Trash : boolean
key: include_spam_trash

Include messages from SPAM and TRASH in the results.

No
Language
logo
JS
logo
Python
Framework
CrewAI
LangChain
Letta

+ More
Use LangChain with Composio

Copy
from langchain.agents import create_openai_functions_agent, AgentExecutor
from langchain import hub
from langchain_openai import ChatOpenAI
from composio_langchain import ComposioToolSet, Action, App
llm = ChatOpenAI()
prompt = hub.pull("hwchase17/openai-functions-agent")

composio_toolset = ComposioToolSet(api_key="ixbtlkivtqk45d0qf2epa5")
tools = composio_toolset.get_tools(actions=['GMAIL_FETCH_EMAILS'])

agent = create_openai_functions_agent(llm, tools, prompt)
agent_executor = AgentExecutor(agent=agent, tools=tools, verbose=True)
task = "your task description here"
result = agent_executor.invoke({"input": task})
print(result)


========
gmailExecute tools
Step 3/3 :
Configure Integration
Connect an account
Execute tools

Action

GMAIL GET ATTACHMENT
Schema
ü™Ñ Natural Language Execution
Generate inputs using function calling
Generate
üìù Action Parameters
Specify the required inputs for this action
Run
Message Id* : string
key: message_id

Id of the message(mail) containing the attachment
Attachment Id* : string
key: attachment_id

Id of the target attachment
File Name* : string
key: file_name

Filename of the attachment file
User Id : string
key: user_id

The user's email address or 'me' for the authenticated user.
me
Language
logo
JS
logo
Python
Framework
CrewAI
LangChain
Letta

+ More
Use LangChain with Composio

Copy
llm = ChatOpenAI()
prompt = hub.pull("hwchase17/openai-functions-agent")

composio_toolset = ComposioToolSet(api_key="ixbtlkivtqk45d0qf2epa5")
tools = composio_toolset.get_tools(actions=['GMAIL_GET_ATTACHMENT'])

agent = create_openai_functions_agent(llm, tools, prompt)
agent_executor = AgentExecutor(agent=agent, tools=tools, verbose=True)
task = "your task description here"
result = agent_executor.invoke({"input": task})
print(result)