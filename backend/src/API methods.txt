==========AI Agent sending funds to a specified payment destination. You can add a Payee in the Payman AI dashboard for an ID. You can also use the SDK to search for all payee’s that your AI can find for quick payments=======

const client = new Paymanai({
  xPaymanAPISecret: process.env["PAYMAN_API_SECRET"],
  baseURL: process.env["PAYMAN_BASE_URL"],
});

client.payments.sendPayment({
  amountDecimal: 50.0, //required in decimal format
  customerId: "cust_123", // optional
  customerEmail: "customer@example.com", // optional
  customerName: "John Doe", // optional
  memo: "Service payment",
  paymentDestinationId: "dest_123", // either this or `paymentDestination` object
});


Send Payments
Start sending payments

​
Send Payment
AI Agent sending funds to a specified payment destination. You can add a Payee in the Payman AI dashboard for an ID. You can also use the SDK to search for all payee’s that your AI can find for quick payments.


client.payments.sendPayment({
  amountDecimal: 50.0, //required in decimal format
  customerId: "cust_123", // optional
  customerEmail: "customer@example.com", // optional
  customerName: "John Doe", // optional
  memo: "Service payment",
  paymentDestinationId: "dest_123", // either this or `paymentDestination` object
});
​
Payment Destination Object
When no payment destination added your AI Agent can add the details itself.


client.payments.sendPayment({
  amountDecimal: 100.0,
  paymentDestination: {
    type: "US_ACH",
    accountHolderName: "John Doe",
    accountNumber: "123456789",
    accountType: "checking",
    routingNumber: "987654321",
    name: "Primary Checking Account",
    contactDetails: {
      contactType: "individual",
      email: "john@example.com",
      phoneNumber: "+1234567890",
      address: "123 Main St, City, State 12345",
      taxId: "123-45-6789",
    },
  },
});
​
Field Descriptions
Required Fields
type: Must be ‘US_ACH’ for ACH transfers
accountHolderName: Legal name of the account holder
accountNumber: Bank account number
accountType: Type of bank account (checking or savings)
routingNumber: 9-digit ABA routing number
name: Descriptive name for the payment destination

Optional Fields
tags: Array of strings for categorizing the payment destination
contactDetails: Object containing contact information:
contactType: Either ‘individual’ or ‘business’
email: Contact email address
phoneNumber: Contact phone number
address: Full mailing address
taxId: Tax identification (SSN for individuals, EIN for businesses)


=============
Search for existing payment destinations. This is a simple GET request that returns an array of matching destinations.

You can search just by simply putting in the name and the search will return a list of potential payees. You may also just leave it empty and it will return all.

const client = new Paymanai({
  xPaymanAPISecret: process.env["PAYMAN_API_SECRET"],
  baseURL: process.env["PAYMAN_BASE_URL"],
});

// Get all destinations
const allDestinations = await client.payments.searchDestinations();

// Or filter with optional parameters
const filteredDestinations = await client.payments.searchDestinations({
  name: "John", // Partial match works
  contactEmail: "john@example.com",
  type: "US_ACH",
});
============
Node.js SDK
Customer Deposits
Give your AI Agent the ability to collect funds

​
Customer Deposits
Generate a checkout URL for customers to deposit funds for your AI Agent to use.


const client = new Paymanai({
  xPaymanAPISecret: process.env["PAYMAN_API_SECRET"],
  baseURL: process.env["PAYMAN_BASE_URL"],
});

const response = await client.payments.initiateCustomerDeposit({
  amountDecimal: 10.0, // required - $10.00 for USD, or 1.000000 for USDC
  customerId: "cust_123", // required - your system's customer ID
  customerEmail: "user@example.com", // optional
  customerName: "Jane Smith", // optional
  memo: "Wallet deposit", // optional
});

// response.checkoutUrl contains the payment link
console.log(response.checkoutUrl);
​
Checkout Link returned

{
  checkoutUrl: "https://app.paymanai.com/checkout...";
}
​
Parameters
Required:

amountDecimal: Amount in decimal format
For USD: “10.00” means $10.00
customerId: Your system’s unique customer identifier
Optional:

customerEmail: Customer’s email address

customerName: Customer’s display name

memo: Note for the transaction

feeMode: How to handle processing fees (choose one of the options below)

INCLUDED_IN_AMOUNT (default): Fees taken from amount
ADD_TO_AMOUNT: Fees added on top
walletId: Target wallet (if agent has multiple)

metadata: Additional data as key-value pairs



==
API Endpoints

Node.js SDK
Get Balances
Get how much your AI Agent can spend (per agent or per customer)

​
Check Balances
Two simple endpoints to check available balances - one for your customers and one for your AI Agent.


const client = new Paymanai({
  xPaymanAPISecret: process.env["PAYMAN_API_SECRET"],
  environment: "sandbox",
});

// Get a customer's balance
const customerBalance = await client.balances.getCustomerBalance(
  "cust_123", // customer ID
  "USD" // currency
);

// Get your AI Agent's balance
const agentBalance = await client.balances.getSpendableBalance(
  "USD" // currency
);
​
What gets returned
Both endpoints return a number representing the spendable balance in the currency’s units:


1.01; // means 1.01 USD
The balance only includes funds that:

Have been verified as received
Aren’t reserved for other tasks
​
Parameters
For Customer Balance:

customerId: Either:

Your system’s customer ID
Payman’s customer ID
currency: Currency code (e.g., “USD”)

For Agent Balance:

currency: Currency code (e.g. “USD”)
